clearvars;clc;[train_data, train_label, validation_data, validation_label, test_data, test_label] = preprocess();save('dataset.mat', 'train_data', 'train_label', 'validation_data', 'validation_label', 'test_data', 'test_label');load('dataset.mat');n_class = 10;T = zeros(size(train_label, 1), n_class);for i = 1 : n_class    T(:, i) = (train_label == i);end%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Logistic Regression with Gradient Descent*******************%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%options = optimset('MaxIter', 200);W = zeros(size(train_data, 2) + 1, n_class);initialWeights = zeros(size(train_data, 2) + 1, 1);for i = 1 : n_class    objFunction = @(params) blrObjFunction(params, train_data, T(:, i));    [w, ~] = fmincg(objFunction, initialWeights, options);    W(:, i) = w;endW_blr = W;predicted_label = blrPredict(W, train_data);fprintf('\nTraining Set Accuracy: %f\n', mean(double(predicted_label == train_label)) * 100);predicted_label = blrPredict(W, validation_data);fprintf('\nValidation Set Accuracy: %f\n', mean(double(predicted_label == validation_label)) * 100);predicted_label = blrPredict(W, test_data);fprintf('\nTest Set Accuracy: %f\n', mean(double(predicted_label == test_label)) * 100);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Logistic Regression with Newton-Raphson method**************%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% (extra credits)% (un-comment this block of code to run)W = zeros(size(train_data, 2) + 1, n_class);initialWeights = zeros(size(train_data, 2) + 1, 1);n_iter = 5;for i = 1 : n_class    W(:, i) = blrNewtonRaphsonLearn(initialWeights, train_data, T(:, i), n_iter);endW_blr_Newton = W;predicted_label = blrPredict(W, train_data);fprintf('\nTraining Set Accuracy: %f\n', mean(double(predicted_label == train_label)) * 100);predicted_label = blrPredict(W, validation_data);fprintf('\nValidation Set Accuracy: %f\n', mean(double(predicted_label == validation_label)) * 100);predicted_label = blrPredict(W, test_data);fprintf('\nTest Set Accuracy: %f\n', mean(double(predicted_label == test_label)) * 100);% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Multiclass Logistic Regression with Gradient Descent *******%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% (extra credits)% (un-comment this block of code to run)load('newdataset_MLR.mat');options = optimset('MaxIter', 200);initialWeights = zeros((size(train_data, 2) + 1) * n_class, 1);objFunction = @(params) mlrObjFunction(params, train_data, T);[W, cost] = fmincg(objFunction, initialWeights, options);W = reshape(W, size(train_data, 2) + 1, n_class);    W_mlr= W;predicted_label = mlrPredict(W, train_data);fprintf('\nTraining Set Accuracy: %f\n', mean(double(predicted_label == train_label)) * 100);predicted_label = mlrPredict(W, validation_data);fprintf('\nValidation Set Accuracy: %f\n', mean(double(predicted_label == validation_label)) * 100);predicted_label = mlrPredict(W, test_data);fprintf('\nTest Set Accuracy: %f\n', mean(double(predicted_label == test_label)) * 100);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Multiclass Logistic Regression with Newton-Raphson method **%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% (extra credits)% (un-comment this block of code to run)% initialWeights = zeros((size(train_data, 2) + 1) * n_class, 1);% n_iter = 5;% [W] = mlrNewtonRaphsonLearn(initialWeights, train_data, T, n_iter);% % predicted_label = mlrPredict(W, train_data);% fprintf('\nTraining Set Accuracy: %f\n', mean(double(predicted_label == train_label)) * 100);% % predicted_label = mlrPredict(W, validation_data);% fprintf('\nValidation Set Accuracy: %f\n', mean(double(predicted_label == validation_label)) * 100);% % predicted_label = mlrPredict(W, test_data);% fprintf('\nTest Set Accuracy: %f\n', mean(double(predicted_label == test_label)) * 100);%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Support Vector Machine**************************************%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   YOUR CODE HERE %%%%%%%%%%%%%%%%%%%%% %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%load('newdataset_SVM.mat');% %Part 1 - Linear Kernelmodel_linear = svmtrain(train_label , train_data , '-t 0');[predicted_label , accuracy , ~] = svmpredict(train_label , train_data , model_linear);[predicted_label , accuracy , ~] = svmpredict(validation_label , validation_data , model_linear);[predicted_label , accuracy , ~] = svmpredict(test_label , test_data , model_linear);%Part 2 - Radial Basis Function - Gamma Setting to 1model_rbf_1 = svmtrain(train_label , train_data , '-g 1');[predicted_label , accuracy , ~] = svmpredict(train_label , train_data , model_rbf_1);[predicted_label , accuracy , ~] = svmpredict(validation_label , validation_data , model_rbf_1);[predicted_label , accuracy , ~] = svmpredict(test_label , test_data , model_rbf_1);%Part 3 - Radial Basis Function - Gamma Setting to defaultmodel_rbf_default = svmtrain(train_label , train_data , '');[predicted_label , accuracy , ~] = svmpredict(train_label , train_data , model_rbf_default);[predicted_label , accuracy , ~] = svmpredict(validation_label , validation_data , model_rbf_default);[predicted_label , accuracy , ~] = svmpredict(test_label , test_data , model_rbf_default);%Part 4 - Radial Basis Function - Gamma Setting to default - Varying the%parameter C from 1 to 100 and visualizing itmodel1 = svmtrain(train_label , train_data , '-c 1');model2 = svmtrain(train_label , train_data , '-c 10');model3 = svmtrain(train_label , train_data , '-c 20');model4 = svmtrain(train_label , train_data , '-c 30');model_rbf_C = svmtrain(train_label , train_data , '-c 40');model6 = svmtrain(train_label , train_data , '-c 50');model7 = svmtrain(train_label , train_data , '-c 60');model8 = svmtrain(train_label , train_data , '-c 70');model9 = svmtrain(train_label , train_data , '-c 80');model10 = svmtrain(train_label , train_data , '-c 90');model11 = svmtrain(train_label , train_data , '-c 100');[predicted_label , accuracy1 , ~] = svmpredict(test_label , test_data , model1);[predicted_label , accuracy2 , ~] = svmpredict(test_label , test_data , model2);[predicted_label , accuracy3 , ~] = svmpredict(test_label , test_data , model3);[predicted_label , accuracy4 , ~] = svmpredict(test_label , test_data , model4);[predicted_label , accuracy5 , ~] = svmpredict(test_label , test_data , model_rbf_C);[predicted_label , accuracy6 , ~] = svmpredict(test_label , test_data , model6);[predicted_label , accuracy7 , ~] = svmpredict(test_label , test_data , model7);[predicted_label , accuracy8 , ~] = svmpredict(test_label , test_data , model8);[predicted_label , accuracy9 , ~] = svmpredict(test_label , test_data , model9);[predicted_label , accuracy10 , ~] = svmpredict(test_label , test_data , model10);[predicted_label , accuracy11 , ~] = svmpredict(test_label , test_data , model11);save('params.mat', 'W_blr', 'W_blr_Newton', 'W_mlr', 'model_linear', 'model_rbf_1', 'model_rbf_default','model_rbf_C');